public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);

        Integer sumClosest = Integer.MAX_VALUE;
        Integer diffClosest = Integer.MAX_VALUE;

        for (int i = 0; i < nums.length - 2; i++) {
            if (i == 0 || (i > 0 && nums[i] != nums[i-1])) {
                int low = i + 1;
                int high = nums.length - 1;
                while (low < high) {
                    int tempSum  = nums[i] + nums[low] + nums[high];
                    if (tempSum == target) {
                        return tempSum;
                    }

                    boolean update = diffClosest > Math.abs(tempSum - target);
                    sumClosest = update ? tempSum : sumClosest;
                    diffClosest = update ? Math.abs(tempSum - target) : diffClosest;

                    if (tempSum < target) {
                        low++;
                    } else {
                        high--;
                    }
                }
            }
        }
        return sumClosest;
    }

    /**
     * https://discuss.leetcode.com/topic/5192/java-solution-with-o-n2-for-reference/19
     */
    public int threeSumClosest2(int[] num, int target) {
        int result = num[0] + num[1] + num[num.length - 1];
        Arrays.sort(num);
        for (int i = 0; i < num.length - 2; i++) {
            if (i > 0 && num[i] == num[i-1]) continue;
            int start = i + 1, end = num.length - 1;
            while (start < end) {
                int sum = num[i] + num[start] + num[end];
                if (sum > target) {
                    end--;
                } else {
                    start++;
                }
                if (Math.abs(sum - target) < Math.abs(result - target)) {
                    result = sum;
                }
            }
        }
        return result;
    }

